// Prisma schema for Federal College of Education, Ofeme Ohuhu
// Roles with dashboard ranking and role-scoped widgets

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // Railway: use PostgreSQL via DATABASE_URL in production
  // SQLite for local development when Railway is unavailable
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Stable role keys to reference in code and seeding
enum RoleKey {
  SUPER_ADMIN
  ADMIN
  LECTURER
  PARENT
  STAFF
}

model Role {
  id        String   @id @default(cuid())
  key       RoleKey  @unique
  label     String
  // Larger rank means higher precedence in dashboards and authorization checks
  rank      Int
  users     User[]
  widgets   DashboardWidget[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// User model for super-admin users management
// This model is designed to accept data from the super-admin/users add user modal form
model User {
  id            String   @id @default(cuid())
  fullName      String   // Required field from form
  email         String   @unique // Required field from form
  regNo         String?  // Optional registration number
  roleKey       RoleKey  // Required field from form (SUPER_ADMIN, ADMIN, STAFF, LECTURER)
  roleLabel     String   // Auto-generated from roleKey in form
  avatarDataUrl String?  // Optional field from form (file upload)
  password      String   // Required field from form (will be hashed in production)
  
  // Additional fields for better user management
  isActive      Boolean  @default(true)
  lastLoginAt   DateTime?
  
  // Role relationship (for compatibility with existing Role model)
  roleId        String?
  role          Role?    @relation(fields: [roleId], references: [id])
  
  // Optional profile relations by role (keeping for future use)
  teacherProfile    TeacherProfile?
  parentProfile     ParentProfile?
  supervisorProfile SupervisorProfile?
  
  // Audit fields
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([email])
  @@index([regNo])
  @@index([roleKey])
  @@index([isActive])
}

// Role-scoped dashboard widgets (cards/links/stats) with ordering
model DashboardWidget {
  id        String  @id @default(cuid())
  title     String
  // Optional description or counter key your app can compute server-side
  description String?
  // Destination route or identifier to navigate when clicked
  href      String
  // Position controls layout order inside a role dashboard
  position  Int

  roleId    String
  role      Role    @relation(fields: [roleId], references: [id])
}

// Teacher-specific fields
model TeacherProfile {
  id         String @id @default(cuid())
  userId     String @unique
  user       User   @relation(fields: [userId], references: [id])

  staffNo    String?
  department String?
}

// Parent-specific fields
model ParentProfile {
  id         String @id @default(cuid())
  userId     String @unique
  user       User   @relation(fields: [userId], references: [id])

  phone      String?
}

// Supervisor-specific fields
model SupervisorProfile {
  id         String @id @default(cuid())
  userId     String @unique
  user       User   @relation(fields: [userId], references: [id])

  unit       String?
}


// Demo storage-backed entities moved from localStorage to DB
model Student {
  id         String   @id @default(cuid())
  regNo      String
  surname    String?
  firstName  String?
  middleName String?
  gender     String?
  school     String?
  programme  String?

  // Extended profile fields
  email                String?
  permanentAddress     String?
  residentialAddress   String?
  phone                String?
  homeTown             String?
  state                String?
  lga                  String?
  dateOfBirth          String?
  bloodGroup           String?
  genotype             String?
  disability           String?
  nextOfKinName        String?
  nextOfKinAddress     String?
  nextOfKinPhone       String?
  nextOfKinEmail       String?
  nextOfKinRelationship String?
  avatarDataUrl        String?

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([regNo, programme])
}

model NewsPost {
  id           String   @id @default(cuid())
  title        String
  date         String?
  body         String?
  imageDataUrl String?

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model GalleryItem {
  id           String   @id @default(cuid())
  title        String?
  date         String?
  imageDataUrl String

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

// DemoUser model designed to accept data from super-admin/users add user modal form
// This model matches the form structure exactly for seamless integration
model DemoUser {
  id            String   @id @default(cuid())
  fullName      String   // Required field from form
  email         String   @unique // Required field from form
  regNo         String?  // Optional registration number
  roleKey       RoleKey  // Required field from form (SUPER_ADMIN, ADMIN, STAFF, LECTURER)
  roleLabel     String   // Auto-generated from roleKey in form
  avatarDataUrl String?  // Optional field from form (file upload)
  password      String   // Required field from form (will be hashed in production)
  
  // Additional fields for better user management
  isActive      Boolean  @default(true)
  lastLoginAt   DateTime?
  
  // Audit fields
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([email])
  @@index([regNo])
  @@index([roleKey])
  @@index([isActive])
}


